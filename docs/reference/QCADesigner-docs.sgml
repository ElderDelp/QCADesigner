<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book id="index" xmlns:xi="http://www.w3.org/2003/XInclude">
  <bookinfo>
    <title>QCADesigner Reference Manual</title>
  </bookinfo>
    <part id="QCADObjects">
      <title>Design Objects</title>
      <partintro>
        <para>
These are the various objects QCADesigner designs consist of. Some of them, such as
<link linkend="QCADObject">QCADObject</link> are base classes, whereas others, such as
<link linkend="QCADCell">QCADCell</link> are implementation classes.
        </para>
      </partintro>
      <xi:include href="xml/QCADObject.xml"/>
        <xi:include href="xml/QCADDesignObject.xml"/>
          <xi:include href="xml/QCADCell.xml"/>
          <xi:include href="xml/QCADLayer.xml"/>
            <xi:include href="xml/QCADClockingLayer.xml"/>
          <xi:include href="xml/QCADElectrode.xml"/>
            <xi:include href="xml/QCADRectangleElectrode.xml"/>
          <xi:include href="xml/QCADStretchyObject.xml"/>
            <xi:include href="xml/QCADLabel.xml"/>
            <xi:include href="xml/QCADRuler.xml"/>
            <xi:include href="xml/QCADSubstrate.xml"/>
      <xi:include href="xml/QCADCompoundDO.xml"/>
      <xi:include href="xml/QCADDOContainer.xml"/>
    </part>
    <part id="QCADPropertyUIs">
      <title>Property UIs</title>
      <partintro>
        <para>
<link linkend="QCADPropertyUI">QCADPropertyUI</link> is the base class for a set of widgets that will allow you
to automatically generate user interfaces for manipulating any <link linkend="GObject">GObject</link>'s
properties. Using a property's <link linkend="GParamSpec">GParamSpec</link>, the user interface constrains the
user's input to values valid for the property.
        </para>
        <para>
To allow the user to manipulate the properties of any <link linkend="GObject">GObject</link>, you can simply call
<informalexample><programlisting>
void object_get_properties (gpointer instance, GtkWindow *parent_window)
  {
  GtkWidget *widget = NULL ;
  QCADPropertyUI *pui = qcad_property_ui_group_new (G_OBJECT (instance), 
    "render-as", GTK_TYPE_DIALOG,
    NULL) ;

  if (NULL != (widget = qcad_property_ui_get_widget (pui, 0, 0, NULL)))
    if (GTK_IS_DIALOG (widget))
      {
      gtk_window_set_transient_for (GTK_WINDOW (widget), parent_window) ;
      gtk_dialog_run (GTK_DIALOG (widget)) ;
      gtk_widget_hide (widget) ;
      }
  }
</programlisting></informalexample>
You can create a UI for a <link linkend="GObject">GObject</link>'s single property with
<link linkend="qcad-property-ui-single-new"><function>qcad_property_ui_single_new()</function></link>.
        </para>
      </partintro>
      <xi:include href="xml/QCADParamSpecObjectList.xml"/>
      <xi:include href="xml/QCADParamSpecTypeList.xml"/>
      <xi:include href="xml/QCADPropertyUI.xml"/>
        <xi:include href="xml/QCADPropertyUISingle.xml"/>
          <xi:include href="xml/QCADPropertyUINumeric.xml"/>
            <xi:include href="xml/QCADPropertyUIInt.xml"/>
            <xi:include href="xml/QCADPropertyUIDouble.xml"/>
          <xi:include href="xml/QCADPropertyUIText.xml"/>
          <xi:include href="xml/QCADPropertyUIObjectList.xml"/>
          <xi:include href="xml/QCADPropertyUIBoolean.xml"/>
          <xi:include href="xml/QCADPropertyUIEnum.xml"/>
        <xi:include href="xml/QCADPropertyUIGroup.xml"/>
    </part>
    <part id="QCADWidgets">
      <title>GTK+ Widgets</title>
      <partintro>
        <para>
Most of these widgets are specific to QCADesigner, however, some of them are open-ended enough to be of general
use.
        </para>
      </partintro>
      <xi:include href="xml/QCADScrolledWindow.xml"/>
      <xi:include href="xml/QCADPrintDialog.xml"/>
      <xi:include href="xml/QCADFlexiCombo.xml"/>
        <xi:include href="xml/QCADLayersCombo.xml"/>
      <xi:include href="xml/QCADCellRendererLayerList.xml"/>
      <xi:include href="xml/QCADCellRendererVT.xml"/>
    </part>
    <part id="QCADWorkaroundWidgets">
      <title>GTK+ Workaround Widgets</title>
      <partintro>
        <para>
GTK+ widgets need to be worked around for two reasons:
          <itemizedlist>
            <listitem>
because they lack functionality advertised by their respective documentation, such as failing to issue "notify::"
signals when one of their properties changes.
            </listitem>
            <listitem>
because needed functionality is only available in GTK+ versions later than the one QCADesigner currently 
depends on and needs to be backported, such as the missing "sensitive" property for
<link linkend="GtkCellRenderer">GtkCellRenderer</link>.
            </listitem>
          </itemizedlist>
        </para>
      </partintro>
      <xi:include href="xml/QCADRadioButton.xml"/>
      <xi:include href="xml/QCADComboBox.xml"/>
      <xi:include href="xml/QCADCellRendererText.xml"/>
      <xi:include href="xml/QCADRadioToolButton.xml"/>
      <xi:include href="xml/QCADToggleToolButton.xml"/>
    </part>
    <part id="QCADUndoRedo">
      <title>Undo/Redo</title>
      <partintro>
        <para>
QCADesigner's Undo/Redo implementation is based on the <link linkend="QCADUndoEntry">QCADUndoEntry</link> class.
<link linkend="QCADUndoEntryGroup">QCADUndoEntryGroup</link> provides an Undo/Redo stack and
<link linkend="qcad-undo-entry-group-get-system"><function>qcad_undo_entry_group_get_default()</function></link>
allows you to retrieve an application-wide Undo/Redo stack you can push
<link linkend="QCADUndoEntry">QCADUndoEntry</link> objects onto. The actual Undo/Redo work can be performed one
of two ways:
          <itemizedlist>
            <listitem>
by subclassing <link linkend="QCADUndoEntry">QCADUndoEntry</link> and overriding its <function>fire()</function>
virtual function,
            </listitem>
            <listitem>
or by connecting to its <link linkend="QCADUndoEntry-apply"><function>"apply"</function></link> signal. 
            </listitem>
          </itemizedlist>
The <link linkend="qcad-undo-entry-signal-connect"><function>qcad_undo_entry_signal_connect()</function></link>
convenience function will connect your handler to the signal and will ensure that <parameter>data</parameter>
will be freed when the object is destroyed.
        </para>
      </partintro>
      <xi:include href="xml/QCADUndoEntry.xml"/>
      <xi:include href="xml/QCADUndoEntryObjectState.xml"/>
      <xi:include href="xml/QCADUndoEntryGroup.xml"/>
      <xi:include href="xml/selection_undo.xml"/>
    </part>
      <xi:include href="xml/interface.xml"/>
      <xi:include href="xml/graph_dialog_callbacks.xml"/>
      <xi:include href="xml/generic_utils.xml"/>
      <xi:include href="xml/bistable_simulation.xml"/>
      <xi:include href="xml/drag_rect.xml"/>
      <xi:include href="xml/print_util.xml"/>
      <xi:include href="xml/print_preview.xml"/>
      <xi:include href="xml/translate_selection_dialog.xml"/>
      <xi:include href="xml/exp_pixmap.xml"/>
      <xi:include href="xml/graph_dialog_data.xml"/>
      <xi:include href="xml/file_selection_window.xml"/>
      <xi:include href="xml/vector_table_options_dialog_interface.xml"/>
      <xi:include href="xml/print_properties_dialog_callbacks.xml"/>
      <xi:include href="xml/coherence_vector.xml"/>
      <xi:include href="xml/recent_files.xml"/>
      <xi:include href="xml/layer_order_dialog.xml"/>
      <xi:include href="xml/fileio.xml"/>
      <xi:include href="xml/exp_array.xml"/>
      <xi:include href="xml/print_graph_properties_dialog.xml"/>
      <xi:include href="xml/simulation.xml"/>
      <xi:include href="xml/simulation_data.xml"/>
      <xi:include href="xml/sim_type_setup_dialog.xml"/>
      <xi:include href="xml/custom_widgets.xml"/>
      <xi:include href="xml/ts_coherence_vector_properties_dialog.xml"/>
      <xi:include href="xml/preamble.xml"/>
      <xi:include href="xml/scale_dialog.xml"/>
      <xi:include href="xml/callbacks.xml"/>
      <xi:include href="xml/fileio_helpers.xml"/>
      <xi:include href="xml/support.xml"/>
      <xi:include href="xml/graph_dialog_interface.xml"/>
      <xi:include href="xml/hsl2rgb.xml"/>
      <xi:include href="xml/about.xml"/>
      <xi:include href="xml/selection_renderer.xml"/>
      <xi:include href="xml/callback_helpers.xml"/>
      <xi:include href="xml/vector_table_options_dialog.xml"/>
      <xi:include href="xml/waveform_interpretation_dialog.xml"/>
      <xi:include href="xml/vector_table_options_dialog_callbacks.xml"/>
      <xi:include href="xml/global_consts.xml"/>
      <xi:include href="xml/design.xml"/>
      <xi:include href="xml/print_properties_dialog.xml"/>
      <xi:include href="xml/matrixlib_3x3.xml"/>
      <xi:include href="xml/print_properties_dialog_interface.xml"/>
      <xi:include href="xml/three_state_coherence.xml"/>
      <xi:include href="xml/vector_table_options_dialog_callback_helpers.xml"/>
      <xi:include href="xml/coherence_vector_properties_dialog.xml"/>
      <xi:include href="xml/layer_mapping_dialog.xml"/>
      <xi:include href="xml/bus_layout_dialog.xml"/>
      <xi:include href="xml/qcadstock.xml"/>
      <xi:include href="xml/sim_engine_setup_dialog.xml"/>
      <xi:include href="xml/print.xml"/>
      <xi:include href="xml/graph_dialog.xml"/>
      <xi:include href="xml/bistable_properties_dialog.xml"/>
      <xi:include href="xml/rotate.xml"/>
      <xi:include href="xml/select.xml"/>
      <xi:include href="xml/array.xml"/>
      <xi:include href="xml/object_helpers.xml"/>
      <xi:include href="xml/mouse_handlers.xml"/>
</book>
